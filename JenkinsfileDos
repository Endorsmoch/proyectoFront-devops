pipeline {
    agent any

    parameters {
        string(name: 'BUILD_NUMBER', defaultValue: '', description: 'Número de versión')
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
        buildNumber = "${params.BUILD_NUMBER}"
        buildNumberWithoutQuotes = buildNumber.replace("'", "")
    }

    stages {
        stage('Shutdown Containers') {
            steps {
                script {
                    def containerCount = bat(script: 'docker ps -aq --filter "name=frontend" | Measure-Object -Line', returnStdout: true).trim()
                    if (containerCount.toInteger() > 0) {
                        // Hay contenedores con "frontend" en su nombre, se apagan
                        bat 'docker stop $(docker ps -aq --filter "name=frontend")'
                    } else {
                        // No se encontraron contenedores, no se hace nada
                        echo "No se encontraron contenedores con el nombre 'frontend'"
                    }
                }
            }
        }
        stage('Construir Imagen') {
            steps {
                bat "docker build -t store-frontend-${BRANCH_NAME}:1.0.0-${buildNumberWithoutQuotes} ."
            }
        }
        stage('Desplegar Imagen') {
            steps {
                bat "docker run -d -p 8081:80 --name store-frontend-1.0.0-${buildNumberWithoutQuotes} --network=store-devops-network store-frontend-${BRANCH_NAME}:1.0.0-${buildNumberWithoutQuotes}"
            }
        }
    }

    post {
        success {
            echo '¡El segundo pipeline se ha completado exitosamente!'
        }
        failure {
            echo 'El segundo pipeline ha fallado!'
        }
    }
}