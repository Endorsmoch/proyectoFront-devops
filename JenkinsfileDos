pipeline {
    agent any

    parameters {
        string(name: 'BUILD_NUMBER', defaultValue: '', description: 'Número de versión')
    }

    environment {
        BRANCH_NAME = "${GIT_BRANCH.split("/")[1]}"
        buildNumber = "${params.BUILD_NUMBER}"
        buildNumberWithoutQuotes = buildNumber.replace("'", "")
    }

    stages {
        stage('Detener Contenedores') {
            steps {
                script {
                    def filter = 'name=store-frontend-1.0.0-'
                    def out = bat(script: "docker ps -q --filter \"${filter}\"", returnStdout: true).trim()
                    
                    if (out.isEmpty()) {
                        echo 'No se encontraron contenedores de frontend encendidos'
                    } else {
                        def containerIds = out.split('\\r?\\n')
                        containerIds.each { containerId ->
                            bat "docker stop ${containerId.trim()}"
                        }
                    }
                }
            }
        }
        stage('Construir Imagen') {
            steps {
                bat "docker build -t store-frontend-${BRANCH_NAME}:1.0.0-${buildNumberWithoutQuotes} ."
            }
        }
        stage('Desplegar Imagen') {
            steps {
                bat "docker run -d -p 8081:80 --name store-frontend-1.0.0-${buildNumberWithoutQuotes} --network=store-devops-network store-frontend-${BRANCH_NAME}:1.0.0-${buildNumberWithoutQuotes}"
            }
        }
    }

    post {
        success {
            echo '¡El segundo pipeline se ha completado exitosamente!'
        }
        failure {
            echo 'El segundo pipeline ha fallado!'
        }
    }
}